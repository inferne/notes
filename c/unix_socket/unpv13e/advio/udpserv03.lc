/* include udpserv1 */
#include    "unpifi.h"##  1 ##src/advio/udpserv03.c##

void    mydg_echo(int, SA *, socklen_t, SA *);##  2 ##src/advio/udpserv03.c##

int##  3 ##src/advio/udpserv03.c##
main(int argc, char **argv)##  4 ##src/advio/udpserv03.c##
{##  5 ##src/advio/udpserv03.c##
    int     sockfd;##  6 ##src/advio/udpserv03.c##
    const int on = 1;##  7 ##src/advio/udpserv03.c##
    pid_t   pid;##  8 ##src/advio/udpserv03.c##
    struct ifi_info *ifi, *ifihead;##  9 ##src/advio/udpserv03.c##
    struct sockaddr_in *sa, cliaddr, wildaddr;## 10 ##src/advio/udpserv03.c##

    for (ifihead = ifi = Get_ifi_info(AF_INET, 1);## 11 ##src/advio/udpserv03.c##
         ifi != NULL; ifi = ifi->ifi_next) {## 12 ##src/advio/udpserv03.c##

        /* 4bind unicast address */## 13 ##src/advio/udpserv03.c##
        sockfd = Socket(AF_INET, SOCK_DGRAM, 0);## 14 ##src/advio/udpserv03.c##

        Setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));## 15 ##src/advio/udpserv03.c##

        sa = (struct sockaddr_in *) ifi->ifi_addr;## 16 ##src/advio/udpserv03.c##
        sa->sin_family = AF_INET;## 17 ##src/advio/udpserv03.c##
        sa->sin_port = htons(SERV_PORT);## 18 ##src/advio/udpserv03.c##
        Bind(sockfd, (SA *) sa, sizeof(*sa));## 19 ##src/advio/udpserv03.c##
        printf("bound %s\n", Sock_ntop((SA *) sa, sizeof(*sa)));## 20 ##src/advio/udpserv03.c##

        if ((pid = Fork()) == 0) {  /* child */## 21 ##src/advio/udpserv03.c##
            mydg_echo(sockfd, (SA *) &cliaddr, sizeof(cliaddr), (SA *) sa);## 22 ##src/advio/udpserv03.c##
            exit(0);            /* never executed */## 23 ##src/advio/udpserv03.c##
        }## 24 ##src/advio/udpserv03.c##
/* end udpserv1 */
/* include udpserv2 */
        if (ifi->ifi_flags & IFF_BROADCAST) {## 25 ##src/advio/udpserv03.c##
            /* 4try to bind broadcast address */## 26 ##src/advio/udpserv03.c##
            sockfd = Socket(AF_INET, SOCK_DGRAM, 0);## 27 ##src/advio/udpserv03.c##
            Setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));## 28 ##src/advio/udpserv03.c##

            sa = (struct sockaddr_in *) ifi->ifi_brdaddr;## 29 ##src/advio/udpserv03.c##
            sa->sin_family = AF_INET;## 30 ##src/advio/udpserv03.c##
            sa->sin_port = htons(SERV_PORT);## 31 ##src/advio/udpserv03.c##
            if (bind(sockfd, (SA *) sa, sizeof(*sa)) < 0) {## 32 ##src/advio/udpserv03.c##
                if (errno == EADDRINUSE) {## 33 ##src/advio/udpserv03.c##
                    printf("EADDRINUSE: %s\n",## 34 ##src/advio/udpserv03.c##
                           Sock_ntop((SA *) sa, sizeof(*sa)));## 35 ##src/advio/udpserv03.c##
                    Close(sockfd);## 36 ##src/advio/udpserv03.c##
                    continue;## 37 ##src/advio/udpserv03.c##
                } else## 38 ##src/advio/udpserv03.c##
                    err_sys("bind error for %s",## 39 ##src/advio/udpserv03.c##
                            Sock_ntop((SA *) sa, sizeof(*sa)));## 40 ##src/advio/udpserv03.c##
            }## 41 ##src/advio/udpserv03.c##
            printf("bound %s\n", Sock_ntop((SA *) sa, sizeof(*sa)));## 42 ##src/advio/udpserv03.c##

            if ((pid = Fork()) == 0) {  /* child */## 43 ##src/advio/udpserv03.c##
                mydg_echo(sockfd, (SA *) &cliaddr, sizeof(cliaddr),## 44 ##src/advio/udpserv03.c##
                          (SA *) sa);## 45 ##src/advio/udpserv03.c##
                exit(0);        /* never executed */## 46 ##src/advio/udpserv03.c##
            }## 47 ##src/advio/udpserv03.c##
        }## 48 ##src/advio/udpserv03.c##
    }## 49 ##src/advio/udpserv03.c##
/* end udpserv2 */
/* include udpserv3 */
    /* 4bind wildcard address */## 50 ##src/advio/udpserv03.c##
    sockfd = Socket(AF_INET, SOCK_DGRAM, 0);## 51 ##src/advio/udpserv03.c##
    Setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));## 52 ##src/advio/udpserv03.c##

    bzero(&wildaddr, sizeof(wildaddr));## 53 ##src/advio/udpserv03.c##
    wildaddr.sin_family = AF_INET;## 54 ##src/advio/udpserv03.c##
    wildaddr.sin_addr.s_addr = htonl(INADDR_ANY);## 55 ##src/advio/udpserv03.c##
    wildaddr.sin_port = htons(SERV_PORT);## 56 ##src/advio/udpserv03.c##
    Bind(sockfd, (SA *) &wildaddr, sizeof(wildaddr));## 57 ##src/advio/udpserv03.c##
    printf("bound %s\n", Sock_ntop((SA *) &wildaddr, sizeof(wildaddr)));## 58 ##src/advio/udpserv03.c##

    if ((pid = Fork()) == 0) {  /* child */## 59 ##src/advio/udpserv03.c##
        mydg_echo(sockfd, (SA *) &cliaddr, sizeof(cliaddr), (SA *) sa);## 60 ##src/advio/udpserv03.c##
        exit(0);                /* never executed */## 61 ##src/advio/udpserv03.c##
    }## 62 ##src/advio/udpserv03.c##
    exit(0);## 63 ##src/advio/udpserv03.c##
}## 64 ##src/advio/udpserv03.c##
/* end udpserv3 */

/* include mydg_echo */
void## 65 ##src/advio/udpserv03.c##
mydg_echo(int sockfd, SA *pcliaddr, socklen_t clilen, SA *myaddr)## 66 ##src/advio/udpserv03.c##
{## 67 ##src/advio/udpserv03.c##
    int     n;## 68 ##src/advio/udpserv03.c##
    char    mesg[MAXLINE];## 69 ##src/advio/udpserv03.c##
    socklen_t len;## 70 ##src/advio/udpserv03.c##

    for (;;) {## 71 ##src/advio/udpserv03.c##
        len = clilen;## 72 ##src/advio/udpserv03.c##
        n = Recvfrom(sockfd, mesg, MAXLINE, 0, pcliaddr, &len);## 73 ##src/advio/udpserv03.c##
        printf("child %d, datagram from %s", getpid(),## 74 ##src/advio/udpserv03.c##
               Sock_ntop(pcliaddr, len));## 75 ##src/advio/udpserv03.c##
        printf(", to %s\n", Sock_ntop(myaddr, clilen));## 76 ##src/advio/udpserv03.c##

        Sendto(sockfd, mesg, n, 0, pcliaddr, len);## 77 ##src/advio/udpserv03.c##
    }## 78 ##src/advio/udpserv03.c##
}## 79 ##src/advio/udpserv03.c##
/* end mydg_echo */
